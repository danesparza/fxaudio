// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package data

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAppDataService creates a new instance of MockAppDataService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAppDataService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAppDataService {
	mock := &MockAppDataService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAppDataService is an autogenerated mock type for the AppDataService type
type MockAppDataService struct {
	mock.Mock
}

type MockAppDataService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAppDataService) EXPECT() *MockAppDataService_Expecter {
	return &MockAppDataService_Expecter{mock: &_m.Mock}
}

// AddFile provides a mock function for the type MockAppDataService
func (_mock *MockAppDataService) AddFile(ctx context.Context, filepath string, description string) (File, error) {
	ret := _mock.Called(ctx, filepath, description)

	if len(ret) == 0 {
		panic("no return value specified for AddFile")
	}

	var r0 File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (File, error)); ok {
		return returnFunc(ctx, filepath, description)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) File); ok {
		r0 = returnFunc(ctx, filepath, description)
	} else {
		r0 = ret.Get(0).(File)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, filepath, description)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAppDataService_AddFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFile'
type MockAppDataService_AddFile_Call struct {
	*mock.Call
}

// AddFile is a helper method to define mock.On call
//   - ctx
//   - filepath
//   - description
func (_e *MockAppDataService_Expecter) AddFile(ctx interface{}, filepath interface{}, description interface{}) *MockAppDataService_AddFile_Call {
	return &MockAppDataService_AddFile_Call{Call: _e.mock.On("AddFile", ctx, filepath, description)}
}

func (_c *MockAppDataService_AddFile_Call) Run(run func(ctx context.Context, filepath string, description string)) *MockAppDataService_AddFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAppDataService_AddFile_Call) Return(file File, err error) *MockAppDataService_AddFile_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *MockAppDataService_AddFile_Call) RunAndReturn(run func(ctx context.Context, filepath string, description string) (File, error)) *MockAppDataService_AddFile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function for the type MockAppDataService
func (_mock *MockAppDataService) DeleteFile(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAppDataService_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type MockAppDataService_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockAppDataService_Expecter) DeleteFile(ctx interface{}, id interface{}) *MockAppDataService_DeleteFile_Call {
	return &MockAppDataService_DeleteFile_Call{Call: _e.mock.On("DeleteFile", ctx, id)}
}

func (_c *MockAppDataService_DeleteFile_Call) Run(run func(ctx context.Context, id string)) *MockAppDataService_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppDataService_DeleteFile_Call) Return(err error) *MockAppDataService_DeleteFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAppDataService_DeleteFile_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockAppDataService_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFiles provides a mock function for the type MockAppDataService
func (_mock *MockAppDataService) GetAllFiles(ctx context.Context) ([]File, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFiles")
	}

	var r0 []File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]File, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []File); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAppDataService_GetAllFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFiles'
type MockAppDataService_GetAllFiles_Call struct {
	*mock.Call
}

// GetAllFiles is a helper method to define mock.On call
//   - ctx
func (_e *MockAppDataService_Expecter) GetAllFiles(ctx interface{}) *MockAppDataService_GetAllFiles_Call {
	return &MockAppDataService_GetAllFiles_Call{Call: _e.mock.On("GetAllFiles", ctx)}
}

func (_c *MockAppDataService_GetAllFiles_Call) Run(run func(ctx context.Context)) *MockAppDataService_GetAllFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAppDataService_GetAllFiles_Call) Return(files []File, err error) *MockAppDataService_GetAllFiles_Call {
	_c.Call.Return(files, err)
	return _c
}

func (_c *MockAppDataService_GetAllFiles_Call) RunAndReturn(run func(ctx context.Context) ([]File, error)) *MockAppDataService_GetAllFiles_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFilesWithTag provides a mock function for the type MockAppDataService
func (_mock *MockAppDataService) GetAllFilesWithTag(ctx context.Context, tag string) ([]File, error) {
	ret := _mock.Called(ctx, tag)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFilesWithTag")
	}

	var r0 []File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]File, error)); ok {
		return returnFunc(ctx, tag)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []File); ok {
		r0 = returnFunc(ctx, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, tag)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAppDataService_GetAllFilesWithTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFilesWithTag'
type MockAppDataService_GetAllFilesWithTag_Call struct {
	*mock.Call
}

// GetAllFilesWithTag is a helper method to define mock.On call
//   - ctx
//   - tag
func (_e *MockAppDataService_Expecter) GetAllFilesWithTag(ctx interface{}, tag interface{}) *MockAppDataService_GetAllFilesWithTag_Call {
	return &MockAppDataService_GetAllFilesWithTag_Call{Call: _e.mock.On("GetAllFilesWithTag", ctx, tag)}
}

func (_c *MockAppDataService_GetAllFilesWithTag_Call) Run(run func(ctx context.Context, tag string)) *MockAppDataService_GetAllFilesWithTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppDataService_GetAllFilesWithTag_Call) Return(files []File, err error) *MockAppDataService_GetAllFilesWithTag_Call {
	_c.Call.Return(files, err)
	return _c
}

func (_c *MockAppDataService_GetAllFilesWithTag_Call) RunAndReturn(run func(ctx context.Context, tag string) ([]File, error)) *MockAppDataService_GetAllFilesWithTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function for the type MockAppDataService
func (_mock *MockAppDataService) GetConfig(ctx context.Context) (SystemConfig, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 SystemConfig
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (SystemConfig, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) SystemConfig); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(SystemConfig)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAppDataService_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockAppDataService_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
//   - ctx
func (_e *MockAppDataService_Expecter) GetConfig(ctx interface{}) *MockAppDataService_GetConfig_Call {
	return &MockAppDataService_GetConfig_Call{Call: _e.mock.On("GetConfig", ctx)}
}

func (_c *MockAppDataService_GetConfig_Call) Run(run func(ctx context.Context)) *MockAppDataService_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAppDataService_GetConfig_Call) Return(systemConfig SystemConfig, err error) *MockAppDataService_GetConfig_Call {
	_c.Call.Return(systemConfig, err)
	return _c
}

func (_c *MockAppDataService_GetConfig_Call) RunAndReturn(run func(ctx context.Context) (SystemConfig, error)) *MockAppDataService_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetFile provides a mock function for the type MockAppDataService
func (_mock *MockAppDataService) GetFile(ctx context.Context, id string) (File, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (File, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) File); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(File)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAppDataService_GetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFile'
type MockAppDataService_GetFile_Call struct {
	*mock.Call
}

// GetFile is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockAppDataService_Expecter) GetFile(ctx interface{}, id interface{}) *MockAppDataService_GetFile_Call {
	return &MockAppDataService_GetFile_Call{Call: _e.mock.On("GetFile", ctx, id)}
}

func (_c *MockAppDataService_GetFile_Call) Run(run func(ctx context.Context, id string)) *MockAppDataService_GetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAppDataService_GetFile_Call) Return(file File, err error) *MockAppDataService_GetFile_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *MockAppDataService_GetFile_Call) RunAndReturn(run func(ctx context.Context, id string) (File, error)) *MockAppDataService_GetFile_Call {
	_c.Call.Return(run)
	return _c
}

// SetConfig provides a mock function for the type MockAppDataService
func (_mock *MockAppDataService) SetConfig(ctx context.Context, config SystemConfig) error {
	ret := _mock.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for SetConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, SystemConfig) error); ok {
		r0 = returnFunc(ctx, config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAppDataService_SetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConfig'
type MockAppDataService_SetConfig_Call struct {
	*mock.Call
}

// SetConfig is a helper method to define mock.On call
//   - ctx
//   - config
func (_e *MockAppDataService_Expecter) SetConfig(ctx interface{}, config interface{}) *MockAppDataService_SetConfig_Call {
	return &MockAppDataService_SetConfig_Call{Call: _e.mock.On("SetConfig", ctx, config)}
}

func (_c *MockAppDataService_SetConfig_Call) Run(run func(ctx context.Context, config SystemConfig)) *MockAppDataService_SetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(SystemConfig))
	})
	return _c
}

func (_c *MockAppDataService_SetConfig_Call) Return(err error) *MockAppDataService_SetConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAppDataService_SetConfig_Call) RunAndReturn(run func(ctx context.Context, config SystemConfig) error) *MockAppDataService_SetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTags provides a mock function for the type MockAppDataService
func (_mock *MockAppDataService) UpdateTags(ctx context.Context, id string, tags []string) error {
	ret := _mock.Called(ctx, id, tags)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTags")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = returnFunc(ctx, id, tags)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAppDataService_UpdateTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTags'
type MockAppDataService_UpdateTags_Call struct {
	*mock.Call
}

// UpdateTags is a helper method to define mock.On call
//   - ctx
//   - id
//   - tags
func (_e *MockAppDataService_Expecter) UpdateTags(ctx interface{}, id interface{}, tags interface{}) *MockAppDataService_UpdateTags_Call {
	return &MockAppDataService_UpdateTags_Call{Call: _e.mock.On("UpdateTags", ctx, id, tags)}
}

func (_c *MockAppDataService_UpdateTags_Call) Run(run func(ctx context.Context, id string, tags []string)) *MockAppDataService_UpdateTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockAppDataService_UpdateTags_Call) Return(err error) *MockAppDataService_UpdateTags_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAppDataService_UpdateTags_Call) RunAndReturn(run func(ctx context.Context, id string, tags []string) error) *MockAppDataService_UpdateTags_Call {
	_c.Call.Return(run)
	return _c
}
