// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package media

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAudioService creates a new instance of MockAudioService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAudioService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAudioService {
	mock := &MockAudioService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAudioService is an autogenerated mock type for the AudioService type
type MockAudioService struct {
	mock.Mock
}

type MockAudioService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAudioService) EXPECT() *MockAudioService_Expecter {
	return &MockAudioService_Expecter{mock: &_m.Mock}
}

// CheckForPlayer provides a mock function for the type MockAudioService
func (_mock *MockAudioService) CheckForPlayer() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckForPlayer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAudioService_CheckForPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckForPlayer'
type MockAudioService_CheckForPlayer_Call struct {
	*mock.Call
}

// CheckForPlayer is a helper method to define mock.On call
func (_e *MockAudioService_Expecter) CheckForPlayer() *MockAudioService_CheckForPlayer_Call {
	return &MockAudioService_CheckForPlayer_Call{Call: _e.mock.On("CheckForPlayer")}
}

func (_c *MockAudioService_CheckForPlayer_Call) Run(run func()) *MockAudioService_CheckForPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAudioService_CheckForPlayer_Call) Return(err error) *MockAudioService_CheckForPlayer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAudioService_CheckForPlayer_Call) RunAndReturn(run func() error) *MockAudioService_CheckForPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// PlayAudio provides a mock function for the type MockAudioService
func (_mock *MockAudioService) PlayAudio(ctx context.Context, loop bool, audioPathOrUrl string) error {
	ret := _mock.Called(ctx, loop, audioPathOrUrl)

	if len(ret) == 0 {
		panic("no return value specified for PlayAudio")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool, string) error); ok {
		r0 = returnFunc(ctx, loop, audioPathOrUrl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAudioService_PlayAudio_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlayAudio'
type MockAudioService_PlayAudio_Call struct {
	*mock.Call
}

// PlayAudio is a helper method to define mock.On call
//   - ctx
//   - loop
//   - audioPathOrUrl
func (_e *MockAudioService_Expecter) PlayAudio(ctx interface{}, loop interface{}, audioPathOrUrl interface{}) *MockAudioService_PlayAudio_Call {
	return &MockAudioService_PlayAudio_Call{Call: _e.mock.On("PlayAudio", ctx, loop, audioPathOrUrl)}
}

func (_c *MockAudioService_PlayAudio_Call) Run(run func(ctx context.Context, loop bool, audioPathOrUrl string)) *MockAudioService_PlayAudio_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool), args[2].(string))
	})
	return _c
}

func (_c *MockAudioService_PlayAudio_Call) Return(err error) *MockAudioService_PlayAudio_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAudioService_PlayAudio_Call) RunAndReturn(run func(ctx context.Context, loop bool, audioPathOrUrl string) error) *MockAudioService_PlayAudio_Call {
	_c.Call.Return(run)
	return _c
}
